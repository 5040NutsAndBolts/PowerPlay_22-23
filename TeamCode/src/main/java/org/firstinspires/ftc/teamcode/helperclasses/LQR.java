package org.firstinspires.ftc.teamcode.helperclasses;

import android.app.Application;
import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.os.Environment;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.teamcode.Hardware;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.nio.file.Files;
import java.util.Scanner;

public class LQR extends Application
{


    double mass = 100;
    double momentOfInertia = 1250;
    double radius = 5;
    double wheelRadius = 1;
    double angle = 0;
    double lastAngle = 0;
    double lastTime = 0;
    double lastX = 0;
    double lastY = 0;

    double powerMultiply = 1;

    public static double[][][] path;

    Hardware robot;

    public LQR(Hardware robot)
    {

        this.robot=robot;

    }

    /**
     * Tests if the robot is within a circle of given radius and center
     * @param x the robot's x position
     * @param y the robot's y postition
     * @param r radius of circle
     * @return boolean indicating if the robot is within a circle of radius r
     * */
    public boolean robotInCircle(double x, double y, double r)
    {

        return Math.pow(y-robot.y,2)+Math.pow(x-robot.x,2)<Math.pow(r,2);

    }

    public void setPowerMultiply(double power)
    {

        powerMultiply=power;

    }

    /**
     * Runs the robot to a goal position using LQR (linear quadratic regulator)
     * @param path LQR path data generated by our LQR python script this data should be loaded with the load path method
     * @param xGoal the x position (in inches) for the robot to move to on the field
     * @param yGoal the y position (in inches) for the robot to move to on the field
     * @param thetaGoal the angular position (in degrees) for the robot to move to on the field
     * */
    public void runLqrDrive(double[][] path, double xGoal, double yGoal, double thetaGoal)
    {


        double[][] k = path;
        double[] x;

        //flip the angle based on if the robot should be turning clockwise or counterclockwise
        byte sign = 1;
        double diff = thetaGoal-robot.theta;
        if(diff<0)
            diff+=2*Math.PI;
        if(diff>Math.PI)
            sign=-1;
        if(diff>Math.PI)
            diff=Math.PI*2-diff;

        //define state matrix
        x = new double[]{xGoal - robot.x,  -yGoal+robot.y, -sign*(diff), 0,  0, 0};

        //multiply x by the gain matrix k
        double[] d = new double[k.length];
        for (int i = 0; i < k.length; i++) {

            d[i] = 0;

            for (int j = 0; j < k[0].length; j++) {

                d[i] += k[i][j] * x[j];

            }

        }

        d[0]*=powerMultiply;
        d[1]*=powerMultiply;
        d[2]*=powerMultiply;
        d[3]*=powerMultiply;

        double forward=d[0]+d[1]+d[2]+d[3];
        double sideways=-d[0]+d[1]+d[2]-d[3];
        double rotations=-d[0]+d[1]-d[2]+d[3];
        Hardware.currentOpMode.telemetry.addLine(d[0]+" "+d[1]+" "+d[2]+" "+d[3]);

        double forwardRobotOriented=forward*Math.cos(robot.theta)+sideways*Math.sin(robot.theta);
        double sidewaysRobotOriented=-forward*Math.sin(robot.theta)+sideways*Math.cos(robot.theta);

        //run the motors
        robot.drive(-forwardRobotOriented,sidewaysRobotOriented,-rotations);

    }

    /**
     * @param file name of file where LQR data is located
     * @return matrix of LQR gain matrices
     * */
    public double[][] loadPath(String file) throws IOException, ClassNotFoundException
    {

        Scanner s = new Scanner(new File(Environment.getExternalStorageDirectory() + file));
        //Gets LQR matrices file
        String content = s.useDelimiter("\\Z").next();
        s.close();
        //split the file into individual matrices
        String data = content;

        double[][] path = new double[4][6];


        String[] rows = data.split("\r\n");
        for(int j = 0; j<4; j++)
        {

            String[] vals=rows[j].split(" ");
            for(int n = 0; n<6; n++)
            {

                path[j][n]=Double.parseDouble(vals[n]);

            }


        }



        return path;

    }
}